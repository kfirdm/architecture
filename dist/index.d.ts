
// todo: this needs to be autogenerated from protos.json

export interface GetHeartbeatInput {
  requesterName: string;
  requesterVersion: string;
}

export interface GetHeartbeatOutput {
  responderName: string;
  responderVersion: string;
}

export interface Transaction {
  sender: string;
  recipient: string;
  amount: number; // should be Long from https://github.com/dcodeIO/long.js
  id: string;
}

export interface AnnounceTransactionInput {
  transaction: Transaction;
}

export interface AnnounceTransactionOutput {
}

export interface AddNewPendingTransactionInput {
  transaction: Transaction;
}

export interface AddNewPendingTransactionOutput {
}

export interface AddExistingPendingTransactionInput {
  transaction: Transaction;
}

export interface AddExistingPendingTransactionOutput {
}

export interface GetHeartbeatContext {
  req: GetHeartbeatInput;
  res: GetHeartbeatOutput;
}

export interface AnnounceTransactionContext {
  req: AnnounceTransactionInput;
  res: AnnounceTransactionOutput;
}

export interface AddNewPendingTransactionContext {
  req: AddNewPendingTransactionInput;
  res: AddNewPendingTransactionOutput;
}

export interface AddExistingPendingTransactionContext {
  req: AddExistingPendingTransactionInput;
  res: AddExistingPendingTransactionOutput;
}

export interface ChatterClient {
  getHeartbeat(getHeartbeatInput: GetHeartbeatInput): GetHeartbeatOutput;
}

export interface ChatterServer {
  getHeartbeat(context: GetHeartbeatContext): void;
}

export const Chatter: string[];

export interface PublicApiClient {
  getHeartbeat(getHeartbeatInput: GetHeartbeatInput): GetHeartbeatOutput;
}

export interface PublicApiServer {
  getHeartbeat(context: GetHeartbeatContext): void;
}

export const PublicApi: string[];

export interface TransactionPoolClient {
  getHeartbeat(getHeartbeatInput: GetHeartbeatInput): GetHeartbeatOutput;
  addNewPendingTransaction(addNewPendingTransactionInput: AddNewPendingTransactionInput): AddNewPendingTransactionOutput;
  addExistingPendingTransaction(addExistingPendingTransactionInput: AddExistingPendingTransactionInput): AddExistingPendingTransactionOutput;
}

export interface TransactionPoolServer {
  getHeartbeat(rpc: GetHeartbeatContext): void;
  addNewPendingTransaction(rpc: AddNewPendingTransactionContext): void;
  addExistingPendingTransaction(rpc: AddExistingPendingTransactionContext): void;
}

export const TransactionPool: string[];

export interface GossipClient {
  getHeartbeat(getHeartbeatInput: GetHeartbeatInput): GetHeartbeatOutput;
  announceTransaction(announceTransactionInput: AnnounceTransactionInput): AnnounceTransactionOutput;
}

export interface GossipServer {
  getHeartbeat(rpc: GetHeartbeatContext): void;
  announceTransaction(rpc: AnnounceTransactionContext): void;
}

export const Gossip: string[];

export interface ClientMap {
  chatter?: ChatterClient;
  publicApi?: PublicApiClient;
  transactionPool?: TransactionPoolClient;
  gossip?: GossipClient;
}

export type HeardbeatClient = ChatterClient;
